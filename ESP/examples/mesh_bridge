//BRIDGE NODE Code - has to be ESP32 for now, the node will recieve a message from the other nodes 
//(for now the message contains 2 values and it is written in the following manner: "<NODE_ID> <NODE COUNTER>")
//the bridge will decode the message, and every time he recieves one he will add the values to a map by:
//key: nodeId , value: measurment. every 30 seconds it will disconnect from the mesh, connect to WiFi, and push the last saved data
//start:
//#include <Arduino.h>
#include <painlessMesh.h>
#include <Firebase_ESP_Client.h>
#include "time.h"
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <vector>
#include <map>
#include <cstdlib>
using namespace painlessmesh;
using namespace std;
/***************************
 *  Macro Definitions For the mesh
 **************************/
#define   MESH_PREFIX     "whateverYouLike"
#define   MESH_PASSWORD   "somethingSneaky"
#define   MESH_PORT       5555
/***************************
 *  Variables Definitions For the WiFi - Change wifi ssid,password to match yours
 **************************/
const char* ssid     = "My_hotspot";
const char* password = "mypassword";
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 7200;
const int   daylightOffset_sec = 7200;
/***************************
 *  Macro Definitions For the FireStore DB
 **************************/
#define API_KEY "AIzaSyCpnmHDV7B7oR6pnKXS0VBFoqaF174UzZM"
#define FIREBASE_PROJECT_ID "meshgarden-iot"
#define USER_EMAIL "ioadmin@ioadmin.com"
#define USER_PASSWORD "ioadmin"

//mesh global variables
Scheduler userScheduler; // to control your personal task
painlessMesh  mesh;
//firebase global variables
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
//sync with the server, saving data variables
int lasttime=0; //initialized, used to messure time interaval for the disconnect
std::map<String,String> dict;

// a function that parses a string and creates a vector of words
vector<string> split (string s, string delimiter) {
    size_t pos_start = 0, pos_end, delim_len = delimiter.length();
    string token;
    vector<string> res;
    while ((pos_end = s.find (delimiter, pos_start)) != string::npos) {
        token = s.substr (pos_start, pos_end - pos_start);
        pos_start = pos_end + delim_len;
        res.push_back (token);
    }
    res.push_back (s.substr (pos_start));
    return res;
}
//fireBase Init function, insert the Project firestore ID and do authentication by userName and password
void firebaseInit(){
    config.api_key =API_KEY;
    auth.user.email =USER_EMAIL;
    auth.user.password = USER_PASSWORD;
    Firebase.begin(&config,&auth);
}

//fireBase update Function For moisture and humidity sensor, will recieve 3 Values
// (Have to fix temp- for now its the nodeId), and post them on the firebase 
//under the plantId

//Todo- check option for sensor to sand Json messge on mesh, and firestore will decode it
//declare Strings in each sensor class 

void firestoreDataUpdate(String plantId,double temp, double humi){
  if(WiFi.status() == WL_CONNECTED && Firebase.ready()){
    String documentPath = "Hause/" + plantId;
    FirebaseJson content;
    content.set("fields/temperature/doubleValue", String(temp).c_str());
    content.set("fields/humidity/doubleValue", String(humi).c_str());
 if(Firebase.Firestore.patchDocument(&fbdo, FIREBASE_PROJECT_ID, "", documentPath.c_str(), content.raw(), "temperature,humidity")){
      Serial.printf("ok\n%s\n\n", fbdo.payload().c_str());
      return;
    }else{
      Serial.println(fbdo.errorReason());
    }
    if(Firebase.Firestore.createDocument(&fbdo, FIREBASE_PROJECT_ID, "", documentPath.c_str(), content.raw())){
      Serial.printf("ok\n%s\n\n", fbdo.payload().c_str());
      return;
    }else{
      Serial.println(fbdo.errorReason());
    }
}
}

// Needed for painless library
//receivedCallback - when we get a post on the mesh, it will update the dict by the values got from it
void receivedCallback( uint32_t from, String &msg ) {
  Serial.printf("startHere: Received from %u msg=%s\n", from, msg.c_str());
  std::vector<string> vec = split(msg.c_str(), " ");
  if(dict.find(String(vec[0].c_str())) == dict.end())
    dict.insert(make_pair(String(vec[0].c_str()), String(vec[1].c_str())));
  else
    dict[String(vec[0].c_str())] = String(vec[1].c_str()); 
  Serial.printf("updated DICT [%s] = %s",String(vec[0].c_str()),String(vec[1].c_str()));   
}

//Needed for mesh, do not change
void newConnectionCallback(uint32_t nodeId) {
  Serial.printf("--> startHere: New Connection, nodeId = %u\n", nodeId);
}
void changedConnectionCallback() {
  Serial.printf("Changed connections\n");
}
void nodeTimeAdjustedCallback(int32_t offset) {
    Serial.printf("Adjusted time %u. Offset = %d\n", mesh.getNodeTime(),offset);
}


void setup() {
  Serial.begin(115200);
  //mesh.setDebugMsgTypes( ERROR | MESH_STATUS | CONNECTION | SYNC | COMMUNICATION | GENERAL | MSG_TYPES | REMOTE ); // all types on
  mesh.setDebugMsgTypes( ERROR | STARTUP );  // set before init() so that you can see startup messages
  mesh.init( MESH_PREFIX, MESH_PASSWORD, &userScheduler, MESH_PORT );
  mesh.onReceive(&receivedCallback);
  mesh.onNewConnection(&newConnectionCallback);
  mesh.onChangedConnections(&changedConnectionCallback);
  mesh.onNodeTimeAdjusted(&nodeTimeAdjustedCallback);
  mesh.onDroppedConnection([](uint32_t nodeId) {
   // Do something with the event
   Serial.println(String(nodeId));
});
    // Bridge node, should (in most cases) be a root node. See [the wiki](https://gitlab.com/painlessMesh/painlessMesh/wikis/Possible-challenges-in-mesh-formation) for some background
  mesh.setRoot(true);
  // This node and all other nodes should ideally know the mesh contains a root, so call this on all nodes
  mesh.setContainsRoot(true);
}

void loop() {
  // it will run the user scheduler as well
  mesh.update();
  
  // Init and get the time
   if (millis()-lasttime > 30000){
    mesh.stop();
  // // Connect to Wi-Fi
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
    Serial.println("");
    Serial.println("WiFi connected.");
    firebaseInit();
  //  //pst on the firebase server what was saved on the map
    for(std::map<String,String>::iterator iter = dict.begin(); iter != dict.end(); ++iter){
      firestoreDataUpdate(iter->first,stod(iter->first.c_str()),stod(iter->second.c_str()));
    }
    dict.clear(); //clears the map in order to be more space efficiant, nodes that did not changed would not be posted again
    Serial.println("WiFi disconnected. initialize mesh");
  //  // initializing the mesh network again
    mesh.setDebugMsgTypes( ERROR | STARTUP );  // set before init() so that you can see startup messages
    mesh.init( MESH_PREFIX, MESH_PASSWORD, &userScheduler, MESH_PORT );
    mesh.onReceive(&receivedCallback);
    mesh.onNewConnection(&newConnectionCallback);
    mesh.onChangedConnections(&changedConnectionCallback);
    mesh.onNodeTimeAdjusted(&nodeTimeAdjustedCallback);
    mesh.onDroppedConnection([](uint32_t nodeId) {
    // Do something with the event
    Serial.println(String(nodeId));
    });
    // Bridge node, should (in most cases) be a root node. See [the wiki](https://gitlab.com/painlessMesh/painlessMesh/wikis/Possible-challenges-in-mesh-formation) for some background
    mesh.setRoot(true);
    // This node and all other nodes should ideally know the mesh contains a root, so call this on all nodes
    mesh.setContainsRoot(true);
    lasttime=millis();
  }
  }

